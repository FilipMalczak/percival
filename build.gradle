plugins {
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java-library'
    id 'maven-publish'
    id 'com.palantir.docker-run' version '0.25.0'
}

group = 'com.github.filipmalczak'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

bootJar { enabled = false }
jar {enabled = true}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.springframework.data:spring-data-mongodb'

    testImplementation(platform('org.junit:junit-bom:5.7.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')

    testImplementation'org.springframework.boot:spring-boot-starter-data-mongodb'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

//if something fails, try "docker logout" in local shell

dockerRun {
    name 'mongodb-percival-test'
    image 'mongo:4.4.1'
    ports '27017:27017'
    //env 'MONGO_INITDB_ROOT_USERNAME': 'root', 'MONGO_INITDB_ROOT_PASSWORD': 'example'
    daemonize true
    clean true
}

test {
    dependsOn 'dockerRun'
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy dockerStop
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version
        }
    }
}

//todo startPostMortem, stopPostMortem that starts up the db + express